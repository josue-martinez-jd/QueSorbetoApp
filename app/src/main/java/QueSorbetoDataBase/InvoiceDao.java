package QueSorbetoDataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import QueSorbetoDataBase.Invoice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVOICE".
*/
public class InvoiceDao extends AbstractDao<Invoice, Long> {

    public static final String TABLENAME = "INVOICE";

    /**
     * Properties of entity Invoice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdClient = new Property(1, String.class, "idClient", false, "ID_CLIENT");
        public final static Property IdInvoice = new Property(2, String.class, "idInvoice", false, "ID_INVOICE");
        public final static Property InvoiceNumber = new Property(3, Integer.class, "invoiceNumber", false, "INVOICE_NUMBER");
        public final static Property InvoiceDate = new Property(4, java.util.Date.class, "invoiceDate", false, "INVOICE_DATE");
        public final static Property InvoiceTotalPrice = new Property(5, Double.class, "invoiceTotalPrice", false, "INVOICE_TOTAL_PRICE");
    };


    public InvoiceDao(DaoConfig config) {
        super(config);
    }
    
    public InvoiceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVOICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_CLIENT\" TEXT NOT NULL ," + // 1: idClient
                "\"ID_INVOICE\" TEXT NOT NULL ," + // 2: idInvoice
                "\"INVOICE_NUMBER\" INTEGER," + // 3: invoiceNumber
                "\"INVOICE_DATE\" INTEGER," + // 4: invoiceDate
                "\"INVOICE_TOTAL_PRICE\" REAL);"); // 5: invoiceTotalPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVOICE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Invoice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdClient());
        stmt.bindString(3, entity.getIdInvoice());
 
        Integer invoiceNumber = entity.getInvoiceNumber();
        if (invoiceNumber != null) {
            stmt.bindLong(4, invoiceNumber);
        }
 
        java.util.Date invoiceDate = entity.getInvoiceDate();
        if (invoiceDate != null) {
            stmt.bindLong(5, invoiceDate.getTime());
        }
 
        Double invoiceTotalPrice = entity.getInvoiceTotalPrice();
        if (invoiceTotalPrice != null) {
            stmt.bindDouble(6, invoiceTotalPrice);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Invoice readEntity(Cursor cursor, int offset) {
        Invoice entity = new Invoice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // idClient
            cursor.getString(offset + 2), // idInvoice
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // invoiceNumber
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // invoiceDate
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5) // invoiceTotalPrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Invoice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdClient(cursor.getString(offset + 1));
        entity.setIdInvoice(cursor.getString(offset + 2));
        entity.setInvoiceNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setInvoiceDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setInvoiceTotalPrice(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Invoice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Invoice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
